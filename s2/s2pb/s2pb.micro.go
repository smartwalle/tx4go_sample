// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: s2pb.proto

/*
Package s2pb is a generated protocol buffer package.

It is generated from these files:
	s2pb.proto

It has these top-level messages:
	Req
	Rsp
*/
package s2pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for S2 service

type S2Service interface {
	Call(ctx context.Context, in *Req, opts ...client.CallOption) (*Rsp, error)
}

type s2Service struct {
	c    client.Client
	name string
}

func NewS2Service(name string, c client.Client) S2Service {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "s2pb"
	}
	return &s2Service{
		c:    c,
		name: name,
	}
}

func (c *s2Service) Call(ctx context.Context, in *Req, opts ...client.CallOption) (*Rsp, error) {
	req := c.c.NewRequest(c.name, "S2.Call", in)
	out := new(Rsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for S2 service

type S2Handler interface {
	Call(context.Context, *Req, *Rsp) error
}

func RegisterS2Handler(s server.Server, hdlr S2Handler, opts ...server.HandlerOption) error {
	type s2 interface {
		Call(ctx context.Context, in *Req, out *Rsp) error
	}
	type S2 struct {
		s2
	}
	h := &s2Handler{hdlr}
	return s.Handle(s.NewHandler(&S2{h}, opts...))
}

type s2Handler struct {
	S2Handler
}

func (h *s2Handler) Call(ctx context.Context, in *Req, out *Rsp) error {
	return h.S2Handler.Call(ctx, in, out)
}
